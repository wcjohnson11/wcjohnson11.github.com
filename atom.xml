<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Will Johnson</title>
  <link href="http://blog.wcj.io/atom.xml" rel="self"/>
  <link href="http://blog.wcj.io"/>
  <updated>2016-04-11T02:13:34.757Z</updated>
  <id>http://blog.wcj.io</id>
  <author>
    <name>Will Johnson</name>
  </author>
  <entry>
    <title>Mitchell&#x27;s Best Candidate Algorithm</title>
    <link href="http://blog.wcj.io/mitchells"/>
    <id>http://blog.wcj.io/mitchells</id>
    <updated>2015-09-10T00:00:00.000Z</updated>
    <author>
      <name>Will Johnson</name>
    </author>
    <summary type="html">&lt;script src=&quot;https://cdnjs.cloudflare.com/ajax/libs/d3/3.5.5/d3.min.js&quot;&gt;&lt;/script&gt;</summary>
    <content type="html">&lt;script src=&quot;https://cdnjs.cloudflare.com/ajax/libs/d3/3.5.5/d3.min.js&quot;&gt;&lt;/script&gt;
&lt;script&gt;

var width = 960,
    height = 500;

var sample = bestCandidateSampler(width, height, 10, 3000);

var svg = d3.select(&quot;body&quot;).append(&quot;svg&quot;)
    .attr(&quot;width&quot;, width)
    .attr(&quot;height&quot;, height);

d3.timer(function() {
  for (var i = 0; i &lt; 10; ++i) {
    var s = sample();
    if (!s) return true;
    svg.append(&quot;circle&quot;)
        .attr(&quot;cx&quot;, s[0])
        .attr(&quot;cy&quot;, s[1])
        .attr(&quot;r&quot;, 0)
      .transition()
        .attr(&quot;r&quot;, 2);
  }
});

function bestCandidateSampler(width, height, numCandidates, numSamplesMax) {
  var numSamples = 0;

  var quadtree = d3.geom.quadtree()
      .extent([[0, 0], [width, height]])
      ([[Math.random() * width, Math.random() * height]]);

  return function() {
    if (++numSamples &gt; numSamplesMax) return;
    var bestCandidate, bestDistance = 0;
    for (var i = 0; i &lt; numCandidates; ++i) {
      var c = [Math.random() * width, Math.random() * height],
          d = distance(search(c[0], c[1]), c);
      if (d &gt; bestDistance) {
        bestDistance = d;
        bestCandidate = c;
      }
    }
    quadtree.add(bestCandidate);
    return bestCandidate;
  };

  function distance(a, b) {
    var dx = a[0] - b[0],
        dy = a[1] - b[1];
    return dx * dx + dy * dy;
  };

  // Find the closest node to the specified point.
  function search(x, y) {
    var x0 = 0,
        y0 = 0,
        x3 = width,
        y3 = width,
        minDistance2 = Infinity,
        closestPoint;

    (function find(node, x1, y1, x2, y2) {
      var point;

      // stop searching if this cell can’t contain a closer node
      if (x1 &gt; x3 || y1 &gt; y3 || x2 &lt; x0 || y2 &lt; y0) return;

      // visit this point
      if (point = node.point) {
        var dx = x - point[0],
            dy = y - point[1],
            distance2 = dx * dx + dy * dy;
        if (distance2 &lt; minDistance2) {
          var distance = Math.sqrt(minDistance2 = distance2);
          x0 = x - distance, y0 = y - distance;
          x3 = x + distance, y3 = y + distance;
          closestPoint = point;
        }
      }

      // bisect the current node
      var children = node.nodes,
          xm = (x1 + x2) * .5,
          ym = (y1 + y2) * .5,
          right = x &gt; xm,
          below = y &gt; ym;

      // visit closest cell first
      if (node = children[below &lt;&lt; 1 | right]) find(node, right ? xm : x1, below ? ym : y1, right ? x2 : xm, below ? y2 : ym);
      if (node = children[below &lt;&lt; 1 | !right]) find(node, right ? x1 : xm, below ? ym : y1, right ? xm : x2, below ? y2 : ym);
      if (node = children[!below &lt;&lt; 1 | right]) find(node, right ? xm : x1, below ? y1 : ym, right ? x2 : xm, below ? ym : y2);
      if (node = children[!below &lt;&lt; 1 | !right]) find(node, right ? x1 : xm, below ? y1 : ym, right ? xm : x2, below ? ym : y2);
    })(quadtree, x0, y0, x3, y3);

    return closestPoint;
  }
}

&lt;/script&gt;</content>
  </entry>
  <entry>
    <title>D3, ever heard of it?</title>
    <link href="http://blog.wcj.io/what-is-d3"/>
    <id>http://blog.wcj.io/what-is-d3</id>
    <updated>2015-09-08T00:00:00.000Z</updated>
    <author>
      <name>Will Johnson</name>
    </author>
    <summary type="html">&lt;p&gt;D3 is a JavaScript Library that combines powerful visualization components with a data-driven approach to DOM manipulation. As a library it is extremely flexible, working directly with HTML, CSS and SVG to display data in any way you can imagine. It is also fun to write thanks to it’s functional style that allows for method chaining, and code reusability.&lt;/p&gt;
</summary>
    <content type="html">&lt;h3 id=&quot;what-is-it-&quot;&gt;What is it?&lt;/h3&gt;
&lt;p&gt;D3 is a JavaScript Library that combines powerful visualization components with a data-driven approach to DOM manipulation. As a library it is extremely flexible, working directly with HTML, CSS and SVG to display data in any way you can imagine. It is also fun to write thanks to it’s functional style that allows for method chaining, and code reusability.&lt;/p&gt;
&lt;p&gt;When I was first learning JavaScript, D3 was one of the most compelling prospects of being a skilled coder. Looking at examples like these made me so excited that I had to keep coding. The sheer variety of data visualizations out there and their expressiveness had me geeking out. The ability to convey an idea and an accompanying mass of data was extraordinarily appealing to me.&lt;/p&gt;
&lt;h3 id=&quot;getting-started-with-d3&quot;&gt;Getting started with D3&lt;/h3&gt;
&lt;p&gt;D3 can seem daunting but it’s really very simple to use.
You select the document, or a section of the document like so &lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-js&quot;&gt;d3.select(&amp;#39;body&amp;#39;);
d3.select(&amp;#39;#container&amp;#39;);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You can change any attribute of this element like so &lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-js&quot;&gt;d3.select(&amp;#39;body&amp;#39;).style(&amp;#39;background-color&amp;#39;, &amp;#39;black&amp;#39;);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If you’re familiar with jQuery or Prototype, this must feel pretty similar
How about some funky dynamic styling? &lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-js&quot;&gt;d3.selectAll(&amp;quot;p&amp;quot;).style(&amp;quot;color&amp;quot;, function() { 
return &amp;quot;hsl(&amp;quot; + Math.random() * 360 + &amp;quot;,100%,50%)&amp;quot;; });
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt; The above will randomly color all paragraphs on a page, pretty sweet right?&lt;/p&gt;
 &lt;script type=&quot;text/javascript&quot;&gt;
 if (document.ready){

// Creating radio buttons

var shapeData = [&quot;Triangle&quot;, &quot;Circle&quot;, &quot;Square&quot;, &quot;Rectangle&quot;], 
    j = 3;  // Choose the rectangle as default

// Create the shape selectors
var form = d3.select(&quot;body&quot;).append(&quot;form&quot;);

labels = form.selectAll(&quot;label&quot;)
    .data(shapeData)
    .enter()
    .append(&quot;label&quot;)
    .text(function(d) {return d;})
    .insert(&quot;input&quot;)
    .attr({
        type: &quot;radio&quot;,
        class: &quot;shape&quot;,
        name: &quot;mode&quot;,
        value: function(d, i) {return i;}
    })
    .property(&quot;checked&quot;, function(d, i) {return i===j;});

 }
 &lt;/script&gt;</content>
  </entry>
  <entry>
    <title>Creating D3 Donuts for Mode</title>
    <link href="http://blog.wcj.io/creating-d3-donuts-for-mode"/>
    <id>http://blog.wcj.io/creating-d3-donuts-for-mode</id>
    <updated>2015-09-08T00:00:00.000Z</updated>
    <author>
      <name>Will Johnson</name>
    </author>
    <summary type="html">&lt;p&gt;We use &lt;a href=&quot;www.modeanalytics.com&quot;&gt;Mode&lt;/a&gt; pretty extensively at Segment, and I’ve actually been fanboying hard since way before I started working at Segment when I first saw Derek Steer speak at SF Data Week about the value in sharing analysis and visualization to create communities. In short, they’re aimed to be the Github of data analysis and visualization. If you haven’t checked them out, go ahead and do so.&lt;/p&gt;
</summary>
    <content type="html">&lt;p&gt;We use &lt;a href=&quot;www.modeanalytics.com&quot;&gt;Mode&lt;/a&gt; pretty extensively at Segment, and I’ve actually been fanboying hard since way before I started working at Segment when I first saw Derek Steer speak at SF Data Week about the value in sharing analysis and visualization to create communities. In short, they’re aimed to be the Github of data analysis and visualization. If you haven’t checked them out, go ahead and do so.&lt;/p&gt;
&lt;p&gt;One of the things that we like most about it is that we can connect our Redshift cluster too it and easily share ad-hoc queries. Say I’m curious about how our latest batch of integrations are doing, I’ll write up a SQL query in Mode, save it and then share it with a colleague who can fork my query and make their own modifications before sharing back to me.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;./sharing.gif&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
Because sharing is caring

Another common use case is someone will put together a cool query and will send it to me and ask me if I can write some D3 for it. In addition to making it easy to share queries and their resulting data sets, they make it easy to write your own custom D3 to display the data however you want.

Today I’m making D3 Donuts, mmmmm

The data from your charts is available in Mode as &lt;code&gt;dataset.content&lt;/code&gt; and you can pass that into the .data() function like you would any data to drive your documents.

### Be The Data
The first step in making any data visualization is understanding what the data looks look, in this case, it’s an object with keys that are integration categories and values that are comma-delimited strings of the integrations for each category.

So off the bat I already know I’m going to need to turn those comma delimited strings into arrays of strings, split at the commas before I do anything else.
&lt;code&gt;js
var data = dataset.content[0];
  for (var key in data) {
    if (data[key] === &amp;quot;&amp;quot;) continue;
    data[key] = data[key].split(&amp;#39;, &amp;#39;);
};&lt;/code&gt;
The above will give me arrays of strings for categories with integrations and empty strings for categories with no integrations. A perfect starting line for making some visualization goodies since I’ll be able to check the &lt;code&gt;data[key]&lt;/code&gt;‘s length and easily see how many integrations a given category has.


&lt;p&gt;&lt;img src=&quot;./donutdon.gif&quot; alt=&quot;&quot;&gt;&lt;/p&gt;</content>
  </entry>
  <entry>
    <title>What is data science?</title>
    <link href="http://blog.wcj.io/data-science"/>
    <id>http://blog.wcj.io/data-science</id>
    <updated>2015-09-04T00:00:00.000Z</updated>
    <author>
      <name>Will Johnson</name>
    </author>
    <summary type="html">&lt;p&gt;Data science is a tool for finding meaning, or predicting behavior in complex systems by using math and large quantities of data.&lt;/p&gt;
</summary>
    <content type="html">&lt;p&gt;Data science is a tool for finding meaning, or predicting behavior in complex systems by using math and large quantities of data.
A good data scientist requires at least three domains of knowledge; hacking and technical skill to process the data, mathematical skill to drive the technical processes and substantive expertise, which helps in knowing which questions to ask, interpreting the data well and understanding it’s structure.
However, data scientists often work in teams so it certain members can specialize in certain domains.&lt;/p&gt;
&lt;h3 id=&quot;what-real-world-problems-can-be-solved-with-data-science-&quot;&gt;What real world problems can be solved with data science?&lt;/h3&gt;
&lt;p&gt;Those you’d expect (traditional tech problems that improve our online experience) 
Recommendation engines - Netflix, Social Media 
Web apps - OKCupid, Uber, etc. finding trends in how people use technology
Those you might not expect (wider-ranging problems that affect 
-Bioinformatics -Urban Planning -Astrophysics -Public Health -Natural Language -Sports&lt;/p&gt;
&lt;h3 id=&quot;what-makes-a-good-data-scientist&quot;&gt;What makes a good data scientist&lt;/h3&gt;
&lt;p&gt;Someone with a curious mind. A good data scientist needs to be able to ask the right questions and see what is good data and what isn’t. This isn’t something that happens immediately, it takes practice. The substantive expertise helps frame and develop the right questions and also recognize valuable data.
Knowing which algorithm to use is also very valuable in addition to creating mathematical models to make predictions based on some data attributes and technical skill is necessary to get all of this done quickly.&lt;/p&gt;
&lt;h3 id=&quot;what-tools-do-they-use-&quot;&gt;What tools do they use?&lt;/h3&gt;
&lt;p&gt;Pandas! Pandas is a Python package providing fast, flexible and expressive data structures designed to work with relational and labeled data both easy and intuitive. It is a high=level building block for doing practical, real world data analysis in Python. 
&lt;a href=&quot;http://pandas.pydata.org/pandas-docs/stable/&quot;&gt;Pandas doc’s&lt;/a&gt;
&lt;a href=&quot;https://bitbucket.org/hrojas/learn-pandas&quot;&gt;How to learn Pandas&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;where-does-the-data-come-from-&quot;&gt;Where does the data come from?&lt;/h3&gt;
&lt;p&gt;Luckily, these days there is no shortage of places to get data. 
&lt;a href=&quot;https://www.data.gov/open-gov/&quot;&gt;Open Government&lt;/a&gt; is one of my favorites, containing a diverse array of city-level and international-level data sets.
In addition to Open Gov, many popular tech companies have open APIs that you can get large quantities of data from.
A great resource that I will be using in a future blog post is &lt;a href=&quot;http://www.kaggle.com/c/titanic-gettingStarted&quot;&gt;Kaggle’s Titanic Dataset&lt;/a&gt; where I will use basic Data Science to predict passenger’s chances of survival 
&lt;img src=&quot;http://d1oi7t5trwfj5d.cloudfront.net/e7/f1fad0117411e2b9e522000a1d0930/file/titanic.jpg&quot; alt=&quot;&quot;&gt;
It’s not gonna be pretty.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Javascript&#x27;s 4 Instantiation Methods</title>
    <link href="http://blog.wcj.io/javascript-instantiation"/>
    <id>http://blog.wcj.io/javascript-instantiation</id>
    <updated>2015-09-02T00:00:00.000Z</updated>
    <author>
      <name>Will Johnson</name>
    </author>
    <summary type="html">&lt;p&gt;There are so many ways to do anything in Javascript and while it’s easy to find something that works and stick with it, I’d argue it’s worthwhile to understand a little better how this magic works.&lt;/p&gt;
</summary>
    <content type="html">&lt;p&gt;There are so many ways to do anything in Javascript and while it’s easy to find something that works and stick with it, I’d argue it’s worthwhile to understand a little better how this magic works.&lt;/p&gt;
&lt;p&gt;Today we’ll be looking at ways to instantiate a class structure and if you keep reading, you’ll soon be able to differentiate between them. That way, you can speak to the different methods of creating class structures and understand why one may be better than the others.&lt;/p&gt;
&lt;p&gt;To keep some semblance of consistency, and to keep myself (and maybe you) entertained across these four approaches, we’ll be building up a Batman class. It may not be the class this post deserves, but it’s the class this post needs.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;./lego-batman.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;

&lt;h3 id=&quot;first-up-is-the-functional-instantiation-pattern&quot;&gt;First up is the Functional Instantiation Pattern&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;var makeBatman = function() {  
  var batman = {};
  batman.age = 38;
  batman.strength = 200;
  batman.fightJoker = function () {
    this.age--;
  };
  batman.workOut = function () {
    this.strength++;
  };
  return batman;
};

var newBatman = makeBatman();
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The functional instantiation pattern requires that all methods are defined within one master maker function. This means that each instance of Batman will have all of these methods directly on the object. 
While this seems like it makes sense at first, it violates the DRY(Don’t Repeat Yourself) commandment that all good coders follow.&lt;/p&gt;
&lt;p&gt;Think about it this way, wouldn’t it be more efficient if you were raising an army of batmen and instead of having to train each one individually, he (or she) could instinctively know how to work out or fight Joker by sharing some Bat-hivemind? Totally. The next couple of methods are sort of like that.&lt;/p&gt;
&lt;h3 id=&quot;functional-instantiation-w-shared-methods&quot;&gt;Functional Instantiation w/ Shared Methods&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;var makeBatman = function() {  
  var batman = {};
  batman.age = 38;
  batman.strength = 200;
  _.extend(batman, sharedMethods);
  return batman;
};
var sharedMethods = {};
sharedMethods.fightJoker = function () {  
  this.age--;
};
sharedMethods.workOut = function () {  
  this.strength++;
};

var newBatman = makeBatman();
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This example uses extend from the underscore js library. This approach creates a sharedMethods object, which includes training and fighting the Joker and &lt;em&gt;extends&lt;/em&gt; a reference to these sharedMethods onto the Batman class.&lt;/p&gt;
&lt;p&gt;Each Batman can have their own age and strength but they will share their training and fighting methods, making your code leaner and faster. Imagine how much more efficient it will be to raise your vigilante batman army!&lt;/p&gt;
&lt;h3 id=&quot;prototypal-instantiation&quot;&gt;Prototypal Instantiation&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;var makeBatman = function() {  
  var batman = Object.create(batmanMethods);
  batman.age = 38;
  batman.strength = 200;
  return batman;
};
var batmanMethods = {};

batmanMethods.fightJoker = function () {  
  this.age--;
};
batmanMethods.workOut = function () {  
  this.strength++;
};

var newBatman = makeBatman();
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;There are some obvious similarities between these last two methods. The difference is where the methods are. In the prototypal pattern, Object.create creates a delegation relationship between the object being created and the object being passed in. &lt;/p&gt;
&lt;p&gt;This means that if an instantiated Batman is called upon to fightJoker, we’ll first look for a fightJoker method on the individual Batman but when we don’t find one there, we’ll be go to the batmanMethods object where the fightJoker method lives. The fightJoker method will be delegated to the batmanMethods object.&lt;/p&gt;
&lt;p&gt;Even though this Batman may not have these actions hard-coded in, he has access to them through the batmanMethods he was created with. Think of this as some heriditary instinct that he has. While he may not explicitly have a method for fighting the Joker, when he looks for it, he will find it in the batmanMethods object that he was created with.&lt;/p&gt;
&lt;p&gt;This saves space but can also make code a bit more flexible since if a Batman were to have a special fightJoker or workOut method it would take precedence over one that is on the batmanMethods object. Hooray for flexibility!&lt;/p&gt;
&lt;h3 id=&quot;pseudo-classical-instantiation&quot;&gt;Pseudo-Classical Instantiation&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;var Batman = function () {  
  this.age = 38;
  this.strength = 200;
};

Batman.prototype.fightJoker = function () {  
  this.age--;
};
Batman.prototype.workOut = function () {  
  this.strength++;
};

var newBatman = new Batman();
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;behold-pseudoclassical-instantiation-&quot;&gt;Behold! PseudoClassical Instantiation!&lt;/h3&gt;
&lt;p&gt;It is the method that most browsers are optimized for so get comfortable with it.
Most imporant to understand with this method is what’s going on up at the top. There’s few things happening implicitly in this pattern.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;this = object.create(batman)&lt;/code&gt; happens implicitly right at the beginning (&lt;em&gt;You didn’t event have to code it!&lt;/em&gt;)&lt;/li&gt;
&lt;li&gt;The Batman function return &lt;code&gt;this&lt;/code&gt;, which is the new batman (&lt;em&gt;You didn’t have to code that either!&lt;/em&gt;)&lt;/li&gt;
&lt;li&gt;The other thing to pay attention to is that these methods are being added onto the Batman Object prototype. These methods will then be available on every new Batman instance to delegate to if a lookup on the original object fails&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Also, you may have noticed that the Batman function starts with a capital B, where the other methods started with a lower-case letter. This is actual best-practices and will let other people reading your code know that you’re using Pseudo-Classical instantiation. Additionally, we used the new keyword, which is what tells the parser to implicitly do those magic steps above!&lt;/p&gt;
&lt;p&gt;So we’ve covered all of the above instantiation types and I’d be surprised if you don’t run into them in the future. I typically use Pseudo-Classical and as mentioned earlier, it’s what most browsers are optimized for.&lt;/p&gt;
&lt;p&gt;Now you’re off to the races, any questions? lemme know!&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;./batman-run.gif&quot; alt=&quot;&quot;&gt;&lt;/p&gt;</content>
  </entry>
  <entry>
    <title>And so it begins</title>
    <link href="http://blog.wcj.io/welcome"/>
    <id>http://blog.wcj.io/welcome</id>
    <updated>2015-05-15T00:00:00.000Z</updated>
    <author>
      <name>Will Johnson</name>
    </author>
    <summary type="html">&lt;canvas width=&quot;1500&quot; height=&quot;1500&quot; id=&quot;canvas&quot;&gt;&lt;/canvas&gt;</summary>
    <content type="html">&lt;canvas width=&quot;1500&quot; height=&quot;1500&quot; id=&quot;canvas&quot;&gt;&lt;/canvas&gt;

&lt;p&gt;My first little ditty.&lt;/p&gt;
&lt;script type=&quot;text/javascript&quot;&gt;
window.onload = function() {

   window.requestAnimFrame = (function() {
      return window.requestAnimationFrame ||
         window.webkitRequestAnimationFrame ||
         window.mozRequestAnimationFrame ||
         function(callback) {
            window.setTimeout(callback, 1000 / 60);
         };
   })();

   var canvas = document.getElementById(&quot;canvas&quot;);
   var ctx = canvas.getContext(&quot;2d&quot;);

   var arr = [];
   var S = function(x, y, angle) {
      this.x = x;
      this.y = y;
      this.angle = angle;
   }

   var num = 59;
   var x = 14;
   var R,r ;
   var lines = 48;


   /*--------------------------------------*/
   function size() {
      canvas.width = 690;
      canvas.height = 660;
   }

   function bg() {
      ctx.fillStyle = &quot;rgba(255,5,255,200)&quot;;
      ctx.fillRect(0, 0, canvas.width, canvas.height);
   }

   function init() {
      var x, y, angle;

      for (var i = 1; i &lt;= num; i++) {
         x = canvas.width / 2;
         y = canvas.height / 2;
         angle = (i / num) * 2 * Math.PI;

         arr.push(new S(x, y, angle));
      }
   }

   function update(i) {
      var s = arr[i];

      s.x = canvas.width / 2 + R * Math.cos(s.angle);
      s.y = canvas.height / 2 + R * Math.sin(s.angle);

      s.angle += Math.PI / 360;

   }

   function draw() {
      var s;
      for (var i = 0; i &lt; arr.length; i++) {
         s = arr[i];

         ctx.strokeStyle = &quot;rgb(10,150,200)&quot;;
         ctx.beginPath();
         for (var j = 0; j &lt; lines; j++) {
            ctx.moveTo(s.x, s.y);
            ctx.lineTo(
               s.x + r * Math.cos((j / lines) * 2 * Math.PI+3*x),
               s.y + r * Math.sin((j / lines) * 2 * Math.PI+3*x));
         }
         ctx.stroke();

         update(i);
      }
      x += Math.PI / 900;
      R = Math.abs(120 * Math.sin(x))+120;
      r = Math.abs(190* Math.cos(x))+10;
   }

   function loop() {
         bg();

         draw();
         requestAnimFrame(loop);
      }
      /*--------------------------------------*/
   window.onresize = size;

   size();
   init();
   loop();
}
&lt;/script&gt;</content>
  </entry>
</feed>